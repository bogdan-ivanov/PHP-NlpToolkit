<?phpnamespace NlpToolkit;class Text{	public $spellchecker = null;	protected $tagger = null;	protected $tokenizer = null;	protected $segmenter = null;	protected $text = null;	public function __construct($text, $segmenter=null, $tokenizer=null, $tagger=null, $spellchecker=null){		if(!$segmenter){			$segmenter = new RegexSentenceTokenizer();		}				if(!$tokenizer){			$tokenizer = new WordTokenizer();		}				if(!$tagger){			$tagger = new BrillTagger(dirname(__FILE__) . "/resources/lexicon.txt");		}				if(!$spellchecker){			$spellchecker = new SpellChecker();		}				$this->tokenizer = $tokenizer;		$this->segmenter = $segmenter;		$this->tagger = $tagger;		$this->spellchecker = $spellchecker;		$this->text = $text;				$this->init();	}		protected function init(){		$sentences = $this->segmenter->tokenize($this->text);		$this->sentences = array();		for($i = 0; $i < count($sentences); $i++){			$tokens = $this->tokenizer->tokenize($sentences[$i]);			$taggedTokens = $this->tagger->tag($tokens);						$toks = array();			for($j = 0; $j < count($taggedTokens); $j++){				array_push($toks, new Token($this, 					$taggedTokens[$j]['word'], $taggedTokens[$j]['tag'], $i, $j));			}						array_push($this->sentences, $toks);		}	}		public function raw(){		return $this->text;	}		public function sentences(){		return $this->sentences;	}		public function tokens(){		$tokens = array();		foreach($this->sentences as $s){			$tokens = array_merge($tokens, $s);		}		return $tokens;	}	}?>